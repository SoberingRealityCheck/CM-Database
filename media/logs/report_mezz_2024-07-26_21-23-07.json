{
  "created": 1722028992.219681,
  "duration": 8.670647144317627,
  "exitcode": 1,
  "root": "/home/jsw/mezz/econd-sw/test_mezzanine",
  "environment": {},
  "summary": {
    "error": 1,
    "total": 1,
    "collected": 1
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
          "type": "Function",
          "lineno": 246
        }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
      "lineno": 246,
      "outcome": "error",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 4.745601053000428,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py",
          "lineno": 658,
          "message": "OSError: [Errno 5] Input/output error"
        },
        "traceback": [
          {
            "path": "conftest.py",
            "lineno": 580,
            "message": ""
          },
          {
            "path": "../econ_i2c.py",
            "lineno": 134,
            "message": "in write_all"
          },
          {
            "path": "../econ_tools/swamp/ECON.py",
            "lineno": 109,
            "message": "in write_all"
          },
          {
            "path": "../econ_tools/swamp/hexactrl_io.py",
            "lineno": 51,
            "message": "in write"
          },
          {
            "path": "../../../.local/lib/python3.9/site-packages/smbus2/smbus2.py",
            "lineno": 658,
            "message": "OSError"
          }
        ],
        "stdout": "Failed on attempt 0 at write 0 of 279.\nFailed on attempt 1 at write 0 of 279.\nFailed on attempt 2 at write 0 of 279.\n",
        "longrepr": "out_of_reset = None, set_up_ROCDAQ = None\nECOND_I2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0...\\x80\\xa0\\xc0\\xe0\\x80\\x00\\x00\\x00\\x00 \\x92\\xaa\\xaa*\\xf3\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\nECONT_I2C_basic_settings_pre_alignment = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\ni2c_ECOND = <econ_i2c.ECON_I2C object at 0xffff9973daf0>, i2c_ECONT = <econ_i2c.ECON_I2C object at 0xffff9973dee0>, lc_ECOND = <utils.linkcapture.LinkCapture object at 0xffff9973d910>\nlc_ECONT = <utils.linkcapture.LinkCapture object at 0xffff9973d820>, linkcap_pattern = 290, fc = <utils.fastcontrol.FastControl object at 0xffff9973dca0>\n\n    @pytest.fixture(scope=\"function\")\n    def basic_setup(\n        out_of_reset,\n        set_up_ROCDAQ,\n        ECOND_I2C_basic_settings_pre_alignment,\n        ECONT_I2C_basic_settings_pre_alignment,\n        i2c_ECOND,\n        i2c_ECONT,\n        lc_ECOND,\n        lc_ECONT,\n        linkcap_pattern,\n        fc,\n    ):\n>       i2c_ECOND.write_all(ECOND_I2C_basic_settings_pre_alignment)\n\nconftest.py:580: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../econ_i2c.py:134: in write_all\n    self.target.write_all(data)\n../econ_tools/swamp/ECON.py:109: in write_all\n    self.transport.write(\n../econ_tools/swamp/hexactrl_io.py:51: in write\n    self.bus.i2c_rdwr(msg_send)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <smbus2.smbus2.SMBus object at 0xffff9973da60>, i2c_msgs = (i2c_msg(96,0,b'\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'),)\nioctl_data = <smbus2.smbus2.i2c_rdwr_ioctl_data object at 0xffff9a7e38c0>\n\n    def i2c_rdwr(self, *i2c_msgs):\n        \"\"\"\n        Combine a series of i2c read and write operations in a single\n        transaction (with repeated start bits but no stop bits in between).\n    \n        This method takes i2c_msg instances as input, which must be created\n        first with :py:meth:`i2c_msg.read` or :py:meth:`i2c_msg.write`.\n    \n        :param i2c_msgs: One or more i2c_msg class instances.\n        :type i2c_msgs: i2c_msg\n        :rtype: None\n        \"\"\"\n        ioctl_data = i2c_rdwr_ioctl_data.create(*i2c_msgs)\n>       ioctl(self.fd, I2C_RDWR, ioctl_data)\nE       OSError: [Errno 5] Input/output error\n\n../../../.local/lib/python3.9/site-packages/smbus2/smbus2.py:658: OSError"
      },
      "teardown": {
        "duration": 0.008328216001245892,
        "outcome": "passed"
      }
    }
  ],
  "FPGA-hexa-IP": "11",
  "branch": "DN_CMtester_IO",
  "commit_hash": "4f4f43d62e25add927a484f024c3e2e08d3482d8",
  "remote_url": "ssh://git@gitlab.cern.ch:7999/hgcal-daq-sw/econd-sw.git",
  "status": "M common_pytest/fixtures.py\u0000 M gpib_controls\u0000 M test_mezzanine/conftest.py\u0000 M test_mezzanine/pytest.ini\u0000 M test_mezzanine/test_io.py\u0000 M utils/gpibclient.py\u0000?? econ_i2c.py.orig\u0000?? test_mezzanine/tmp.py\u0000?? test_radiation/conftest.py.orig\u0000?? test_vectors/\u0000?? utils/align.py.orig\u0000?? utils/io.py.orig\u0000",
  "firmware_name": "econ-mezz-tester-kria.bit\u0000",
  "firmware_git_desc": "9e5953f-dirty",
  "chip_number": null
}