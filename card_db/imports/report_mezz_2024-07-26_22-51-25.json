{
  "created": 1722034304.9017775,
  "duration": 23.643527507781982,
  "exitcode": 1,
  "root": "/home/jsw/mezz/econd-sw/test_mezzanine",
  "environment": {},
  "summary": {
    "passed": 30,
    "failed": 3,
    "total": 33,
    "collected": 33
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_i2c.py",
          "type": "Module"
        },
        {
          "nodeid": "test_io.py",
          "type": "Module"
        },
        {
          "nodeid": "test_packet_econd.py",
          "type": "Module"
        }
      ]
    },
    {
      "nodeid": "test_i2c.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_D[0]",
          "type": "Function",
          "lineno": 34
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_D[255]",
          "type": "Function",
          "lineno": 34
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_T[0]",
          "type": "Function",
          "lineno": 58
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_T[255]",
          "type": "Function",
          "lineno": 58
        },
        {
          "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_D",
          "type": "Function",
          "lineno": 84
        },
        {
          "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_T",
          "type": "Function",
          "lineno": 107
        },
        {
          "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_D",
          "type": "Function",
          "lineno": 130
        },
        {
          "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_T",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "test_i2c.py::test_wrong_reg_address_D",
          "type": "Function",
          "lineno": 176
        },
        {
          "nodeid": "test_i2c.py::test_wrong_reg_address_T",
          "type": "Function",
          "lineno": 200
        },
        {
          "nodeid": "test_i2c.py::test_wrong_i2c_address_D",
          "type": "Function",
          "lineno": 224
        },
        {
          "nodeid": "test_i2c.py::test_wrong_i2c_address_T",
          "type": "Function",
          "lineno": 237
        },
        {
          "nodeid": "test_i2c.py::test_hold_hard_reset_D",
          "type": "Function",
          "lineno": 250
        },
        {
          "nodeid": "test_i2c.py::test_hold_hard_reset_T",
          "type": "Function",
          "lineno": 264
        },
        {
          "nodeid": "test_i2c.py::test_hold_soft_reset_D",
          "type": "Function",
          "lineno": 278
        },
        {
          "nodeid": "test_i2c.py::test_hold_soft_reset_T",
          "type": "Function",
          "lineno": 299
        },
        {
          "nodeid": "test_i2c.py::test_chip_sync_D",
          "type": "Function",
          "lineno": 320
        },
        {
          "nodeid": "test_i2c.py::test_chip_sync_T",
          "type": "Function",
          "lineno": 341
        }
      ]
    },
    {
      "nodeid": "test_io.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.08]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.32]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.08]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.32]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.2]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.08]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.32]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.2]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.08]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.32]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.2]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.08]",
          "type": "Function",
          "lineno": 356
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.32]",
          "type": "Function",
          "lineno": 356
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.2]",
          "type": "Function",
          "lineno": 356
        }
      ]
    },
    {
      "nodeid": "test_packet_econd.py",
      "outcome": "passed",
      "result": []
    }
  ],
  "tests": [
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_D[0]",
      "lineno": 34,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_D[0]",
        "pytestmark",
        "0",
        "parametrize",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5049379450028937,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.148234180000145,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001334819997282466,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_D[255]",
      "lineno": 34,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_D[255]",
        "pytestmark",
        "255",
        "parametrize",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003800484999374021,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.1481727989994397,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012921590023324825,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_T[0]",
      "lineno": 58,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_T[0]",
        "pytestmark",
        "0",
        "parametrize",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.13224751300003845,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12182047999885981,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001298849001614144,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_T[255]",
      "lineno": 58,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_T[255]",
        "pytestmark",
        "255",
        "parametrize",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003787104997172719,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12115956499837921,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012698690006800462,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_D",
      "lineno": 84,
      "outcome": "passed",
      "keywords": [
        "test_hard_reset_i2c_allregisters_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003309793999505928,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14672364700163598,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012086970018572174,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_T",
      "lineno": 107,
      "outcome": "passed",
      "keywords": [
        "test_hard_reset_i2c_allregisters_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033277340007771272,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12025171600180329,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011829560025944375,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_D",
      "lineno": 130,
      "outcome": "passed",
      "keywords": [
        "test_soft_reset_i2c_allregisters_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003328844002680853,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14659578400096507,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012041970003338065,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_T",
      "lineno": 153,
      "outcome": "passed",
      "keywords": [
        "test_soft_reset_i2c_allregisters_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033271940010308754,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12022252500173636,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011815470024885144,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_reg_address_D",
      "lineno": 176,
      "outcome": "passed",
      "keywords": [
        "test_wrong_reg_address_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.004372867999336449,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.002091736998409033,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011617160016612615,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_reg_address_T",
      "lineno": 200,
      "outcome": "passed",
      "keywords": [
        "test_wrong_reg_address_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033223040009033866,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0017331089984509163,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001102524001908023,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_i2c_address_D",
      "lineno": 224,
      "outcome": "passed",
      "keywords": [
        "test_wrong_i2c_address_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003271842997492058,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.004034220000903588,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722034287.1437278,
            "msecs": 143.72777938842773,
            "relativeCreated": 7857.357740402222,
            "thread": 281473174011936,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 5602
          }
        ]
      },
      "teardown": {
        "duration": 0.001214096999319736,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_i2c_address_T",
      "lineno": 237,
      "outcome": "passed",
      "keywords": [
        "test_wrong_i2c_address_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033007339989126194,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.002374493000388611,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722034287.1559901,
            "msecs": 155.9901237487793,
            "relativeCreated": 7869.620084762573,
            "thread": 281473174011936,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 5602
          }
        ]
      },
      "teardown": {
        "duration": 0.0011843969987239689,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_hard_reset_D",
      "lineno": 250,
      "outcome": "passed",
      "keywords": [
        "test_hold_hard_reset_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0020668060024036095,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0027049199998145923,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722034287.1654484,
            "msecs": 165.44842720031738,
            "relativeCreated": 7879.078388214111,
            "thread": 281473174011936,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 5602
          }
        ]
      },
      "teardown": {
        "duration": 0.0010343030007788911,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_hard_reset_T",
      "lineno": 264,
      "outcome": "passed",
      "keywords": [
        "test_hold_hard_reset_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.002055435998045141,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.003418036998482421,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722034287.1748712,
            "msecs": 174.87120628356934,
            "relativeCreated": 7888.501167297363,
            "thread": 281473174011936,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 5602
          }
        ]
      },
      "teardown": {
        "duration": 0.00112364500091644,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_soft_reset_D",
      "lineno": 278,
      "outcome": "passed",
      "keywords": [
        "test_hold_soft_reset_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033149539995065425,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14636276899909717,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011672360014927108,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_soft_reset_T",
      "lineno": 299,
      "outcome": "passed",
      "keywords": [
        "test_hold_soft_reset_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033203239981958177,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12030931600020267,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011926160004804842,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_chip_sync_D",
      "lineno": 320,
      "outcome": "passed",
      "keywords": [
        "test_chip_sync_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.17978078400119557,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14773025899921777,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012807290004275274,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_chip_sync_T",
      "lineno": 341,
      "outcome": "passed",
      "keywords": [
        "test_chip_sync_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.015107407998584677,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12124908699843218,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012611679994734004,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.08]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 1.837739728998713,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            2,
            4,
            0,
            1,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            80,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            4,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            20,
            118,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          5,
          4,
          4,
          5,
          4,
          5
        ],
        "second_max_width": [
          4,
          4,
          4,
          5,
          4,
          5
        ]
      },
      "call": {
        "duration": 0.003578600000764709,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029268960024637636,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.08]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.08]",
        "pytestmark",
        "1.08",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.9111418860011327,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            15,
            9,
            0,
            0,
            0,
            0
          ],
          [
            0,
            10,
            0,
            0,
            0,
            7,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            2,
            255,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            9
          ],
          [
            189,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            119,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            0,
            255,
            14,
            255,
            255,
            255,
            3
          ],
          [
            10,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            47,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            24,
            105,
            0,
            0,
            0,
            0
          ],
          [
            0,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            70,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            190,
            255,
            255,
            255,
            255,
            0,
            0,
            90,
            0,
            43,
            255
          ],
          [
            255,
            0,
            183,
            0,
            255,
            0,
            123,
            21,
            255,
            255,
            255,
            2
          ]
        ],
        "maxwidth": [
          4,
          4,
          5,
          5,
          5,
          5
        ],
        "second_max_width": [
          4,
          3,
          3,
          4,
          4,
          3
        ]
      },
      "call": {
        "duration": 0.0034774980013025925,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029156450000300538,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.08]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.3023181310018117,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48505,
            47645,
            47495,
            47621,
            47317,
            47593,
            47562,
            47399,
            47529,
            47398,
            47431,
            47489,
            47727,
            47454,
            47485,
            47489,
            47370,
            47565,
            47524,
            47465,
            47499,
            47467,
            47429,
            47234,
            47325,
            47498,
            47557,
            47431,
            47339,
            47552,
            47648,
            47580,
            47593,
            47561,
            47331,
            47502,
            47564,
            47614,
            47461,
            47490,
            47563,
            47620,
            49434,
            47545,
            47436,
            47554,
            50182,
            47617,
            47533,
            47484,
            47420,
            47421,
            47396,
            47619,
            47597,
            47423,
            47369,
            47520,
            47204,
            47573,
            47556,
            47520,
            47472
          ],
          [
            48505,
            47645,
            47495,
            47621,
            47317,
            47593,
            47562,
            47399,
            47529,
            47398,
            47431,
            47489,
            47727,
            47454,
            47485,
            47489,
            47370,
            47565,
            47524,
            47465,
            47499,
            47467,
            47429,
            47234,
            47325,
            47498,
            47557,
            47431,
            47339,
            47552,
            47648,
            47580,
            47593,
            47561,
            47331,
            47502,
            47564,
            47614,
            47461,
            47490,
            47563,
            47620,
            49434,
            47545,
            47436,
            47554,
            50182,
            47617,
            47533,
            47484,
            47420,
            47421,
            47396,
            47619,
            47597,
            47423,
            47369,
            47520,
            47204,
            47573,
            47556,
            47520,
            47472
          ]
        ],
        "eTX_errcounts": [
          [
            40974,
            26480,
            8480,
            1047,
            76,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            233,
            3132,
            16037,
            34628,
            42202,
            31225,
            14166,
            2132,
            200,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            27,
            794,
            7631,
            25447,
            40252,
            37669,
            20177,
            5643,
            669,
            25,
            1,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            356,
            4173,
            17336,
            36040,
            42555,
            31774,
            13992,
            3290,
            263,
            25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            23,
            331,
            4181,
            19425,
            35760,
            42901,
            35016,
            17379,
            3521,
            449,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "call": {
        "duration": 0.1340474329990684,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0016197670011024456,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.08]",
      "lineno": 330,
      "outcome": "failed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.08]",
        "pytestmark",
        "1.08",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.06901588099935907,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48685,
            47246,
            47157,
            47426,
            47201,
            47225,
            47354,
            47191,
            47228,
            47500,
            47294,
            46916,
            47425,
            47280,
            47515,
            47334,
            47330,
            47553,
            47510,
            47290,
            47016,
            47298,
            47147,
            47168,
            47305,
            47094,
            47233,
            47412,
            47256,
            47315,
            47495,
            47014,
            47251,
            47379,
            47323,
            47463,
            47689,
            47187,
            47071,
            47414,
            47242,
            47224,
            47516,
            47247,
            47185,
            47355,
            47141,
            47335,
            47381,
            47311,
            47217,
            47351,
            47380,
            47622,
            47448,
            47398,
            47308,
            47391,
            47163,
            47268,
            47183,
            47677,
            47329
          ],
          [
            48685,
            47246,
            47157,
            47426,
            47201,
            47225,
            47354,
            47191,
            47228,
            47500,
            47294,
            46916,
            47425,
            47280,
            47515,
            47334,
            47330,
            47553,
            47510,
            47290,
            47016,
            47298,
            47147,
            47168,
            47305,
            47094,
            47233,
            47412,
            47256,
            47315,
            47495,
            47014,
            47251,
            47379,
            47323,
            47463,
            47689,
            47187,
            47071,
            47414,
            47242,
            47224,
            47516,
            47247,
            47185,
            47355,
            47141,
            47335,
            47381,
            47311,
            47217,
            47351,
            47380,
            47622,
            47448,
            47398,
            47308,
            47391,
            47163,
            47268,
            47183,
            47677,
            47329
          ],
          [
            48685,
            47246,
            47157,
            47426,
            47201,
            47225,
            47354,
            47191,
            47228,
            47500,
            47294,
            46916,
            47425,
            47280,
            47515,
            47334,
            47330,
            47553,
            47510,
            47290,
            47016,
            47298,
            47147,
            47168,
            47305,
            47094,
            47233,
            47412,
            47256,
            47315,
            47495,
            47014,
            47251,
            47379,
            47323,
            47463,
            47689,
            47187,
            47071,
            47414,
            47242,
            47224,
            47516,
            47247,
            47185,
            47355,
            47141,
            47335,
            47381,
            47311,
            47217,
            47351,
            47380,
            47622,
            47448,
            47398,
            47308,
            47391,
            47163,
            47268,
            47183,
            47677,
            47329
          ],
          [
            48685,
            47246,
            47157,
            47426,
            47201,
            47225,
            47354,
            47191,
            47228,
            47500,
            47294,
            46916,
            47425,
            47280,
            47515,
            47334,
            47330,
            47553,
            47510,
            47290,
            47016,
            47298,
            47147,
            47168,
            47305,
            47094,
            47233,
            47412,
            47256,
            47315,
            47495,
            47014,
            47251,
            47379,
            47323,
            47463,
            47689,
            47187,
            47071,
            47414,
            47242,
            47224,
            47516,
            47247,
            47185,
            47355,
            47141,
            47335,
            47381,
            47311,
            47217,
            47351,
            47380,
            47622,
            47448,
            47398,
            47308,
            47391,
            47163,
            47268,
            47183,
            47677,
            47329
          ],
          [
            48685,
            47246,
            47157,
            47426,
            47201,
            47225,
            47354,
            47191,
            47228,
            47500,
            47294,
            46916,
            47425,
            47280,
            47515,
            47334,
            47330,
            47553,
            47510,
            47290,
            47016,
            47298,
            47147,
            47168,
            47305,
            47094,
            47233,
            47412,
            47256,
            47315,
            47495,
            47014,
            47251,
            47379,
            47323,
            47463,
            47689,
            47187,
            47071,
            47414,
            47242,
            47224,
            47516,
            47247,
            47185,
            47355,
            47141,
            47335,
            47381,
            47311,
            47217,
            47351,
            47380,
            47622,
            47448,
            47398,
            47308,
            47391,
            47163,
            47268,
            47183,
            47677,
            47329
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            80,
            1204,
            5254,
            14314,
            24986,
            31307,
            32583,
            28203,
            20222,
            11022,
            2870,
            319,
            40,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            19,
            174,
            1767,
            5332,
            12320,
            24797,
            35634,
            39252,
            32164,
            21924,
            10458,
            3089,
            456,
            25,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            7,
            54,
            621,
            3171,
            10403,
            21762,
            32270,
            36220,
            34217,
            25640,
            15085,
            5931,
            1254,
            170,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            166,
            1423,
            4951,
            10875,
            20991,
            32120,
            41352,
            39714,
            28881,
            18774,
            6612,
            1032,
            47,
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            150,
            1303,
            5746,
            13215,
            23314
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            175,
            1579,
            6727,
            16910,
            29351,
            35271,
            32721,
            23621,
            13046,
            4322,
            604,
            43,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            139,
            1276,
            6550,
            16885,
            31107,
            34878,
            30845,
            24383,
            14158,
            4634,
            529,
            66,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            27,
            314,
            2723,
            8910,
            18481,
            30495,
            38389,
            35371,
            26036,
            13214,
            3421,
            444,
            22,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            67,
            519,
            2619,
            6717,
            16343,
            29582,
            38102,
            36010,
            28544,
            18213,
            6539,
            1351,
            77,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            8,
            124,
            954,
            3510,
            9346,
            20764,
            32583,
            37910,
            37200,
            31282,
            22951,
            10437,
            3156,
            454,
            32,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            14,
            126,
            1208,
            4932,
            10216,
            18017,
            30210,
            39863,
            41749,
            34883,
            23743,
            11679,
            4156,
            867,
            95,
            13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            77,
            690,
            3003,
            8477
          ]
        ]
      },
      "call": {
        "duration": 0.2729074839990062,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 353,
          "message": "assert False\n +  where False = <built-in method all of numpy.ndarray object at 0xffff7fca3cf0>()\n +    where <built-in method all of numpy.ndarray object at 0xffff7fca3cf0> = array([21, 13, 19, 21, 11]) >= 13.all"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 353,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECONT = <utils.io.IO object at 0xffff7fc8d640>, out_of_reset = None, eTX_delay_scan_setup_ECONT = None\njson_metadata = {'eTX_bitcounts': [[48685, 47246, 47157, 47426, 47201, 47225, ...], [48685, 47246, 47157, 47426, 47201, 47225, ...], [..., 0, ...], [0, 0, 7, 54, 621, 3171, ...], [0, 0, 0, 0, 0, 0, ...], [0, 0, 0, 0, 0, 0, ...], [0, 0, 0, 0, 8, 124, ...]]}\n\n    @pytest.mark.ECONT\n    def test_eTX_delayscan_ECONT(\n        set_voltage,\n        from_IO_ECONT,\n        out_of_reset,\n        eTX_delay_scan_setup_ECONT,\n        json_metadata\n    ):\n        \"\"\"\n        Scan the delays in \"from_IO\" and measure the bit error rate for each delay.\n        \"\"\"\n        delays, bitcounts, errcounts = from_IO_ECONT.delay_scan()\n        json_metadata[\"eTX_delays\"] = delays.tolist()\n        json_metadata[\"eTX_bitcounts\"] = bitcounts.tolist()\n        json_metadata[\"eTX_errcounts\"] = errcounts.tolist()\n    \n        max_width, second_max_width = get_max_width(errcounts.T, num_channels=5, padding=10)\n    \n        # pprint(errcounts.T)\n        # pprint(max_width)\n        # pprint(second_max_width)\n    \n>       assert (max_width >= 13).all()  ## values previously use in ECONT qc_test\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0xffff7fca3cf0>()\nE        +    where <built-in method all of numpy.ndarray object at 0xffff7fca3cf0> = array([21, 13, 19, 21, 11]) >= 13.all\n\ntest_io.py:353: AssertionError"
      },
      "teardown": {
        "duration": 0.0016195559983316343,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.08]",
      "lineno": 356,
      "outcome": "passed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29263439499845845,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1694748959998833,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0014528729989251588,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.32]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 1.2951791119994596,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            10,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            7,
            255,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            29,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            19,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            3,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            13,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            190,
            96,
            14,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            14,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          5,
          4,
          5,
          5,
          5,
          4
        ],
        "second_max_width": [
          5,
          4,
          4,
          3,
          4,
          4
        ]
      },
      "call": {
        "duration": 0.0034948079992318526,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029167250031605363,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.32]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.32]",
        "pytestmark",
        "1.32",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5346395689994097,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            194,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            10,
            255,
            218,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            111,
            255,
            151,
            255,
            171,
            0,
            0,
            205,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            0,
            101,
            3,
            255,
            32,
            255,
            15
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            98,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            255,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            4,
            255,
            146,
            255,
            250,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            190,
            255,
            145,
            255,
            255,
            5,
            0,
            136,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            1,
            255,
            0,
            255,
            113,
            255,
            148
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ]
        ],
        "maxwidth": [
          5,
          5,
          5,
          5,
          5,
          5
        ],
        "second_max_width": [
          3,
          4,
          4,
          4,
          4,
          3
        ]
      },
      "call": {
        "duration": 0.003474318000371568,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002918225000030361,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.32]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29571936299907975,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48151,
            47760,
            47461,
            47705,
            47361,
            47700,
            47405,
            47395,
            47535,
            47512,
            47287,
            47558,
            47555,
            47647,
            47650,
            47457,
            47683,
            47612,
            47707,
            47505,
            47644,
            47909,
            47427,
            49716,
            47785,
            47558,
            47798,
            47490,
            47369,
            47557,
            47465,
            47390,
            47518,
            47455,
            47423,
            47740,
            47876,
            47589,
            47543,
            47379,
            47374,
            47488,
            47549,
            47647,
            47553,
            47759,
            47609,
            47623,
            49158,
            47644,
            47932,
            47403,
            47815,
            47627,
            47440,
            47549,
            47288,
            47264,
            47097,
            47268,
            47605,
            47511,
            47520
          ],
          [
            48151,
            47760,
            47461,
            47705,
            47361,
            47700,
            47405,
            47395,
            47535,
            47512,
            47287,
            47558,
            47555,
            47647,
            47650,
            47457,
            47683,
            47612,
            47707,
            47505,
            47644,
            47909,
            47427,
            49716,
            47785,
            47558,
            47798,
            47490,
            47369,
            47557,
            47465,
            47390,
            47518,
            47455,
            47423,
            47740,
            47876,
            47589,
            47543,
            47379,
            47374,
            47488,
            47549,
            47647,
            47553,
            47759,
            47609,
            47623,
            49158,
            47644,
            47932,
            47403,
            47815,
            47627,
            47440,
            47549,
            47288,
            47264,
            47097,
            47268,
            47605,
            47511,
            47520
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            195,
            3260,
            18163,
            36654,
            37185,
            18823,
            4844,
            366,
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            157,
            2647,
            16031,
            34109,
            41753,
            26211,
            8244,
            976,
            55,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            47,
            1062,
            8072,
            28664,
            41750,
            39289,
            19613,
            4885,
            416,
            14,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            103,
            2330,
            13239,
            30919,
            42747,
            39239,
            20757,
            5801,
            699,
            71,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "call": {
        "duration": 0.13455288399927667,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0016185659987968393,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.32]",
      "lineno": 330,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.32]",
        "pytestmark",
        "1.32",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.06889089900141698,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48163,
            49332,
            48869,
            47341,
            47251,
            47171,
            47343,
            47264,
            47261,
            47401,
            47181,
            47209,
            47316,
            47154,
            47131,
            47480,
            47195,
            47287,
            47337,
            47617,
            47668,
            47402,
            47113,
            47237,
            47173,
            47332,
            47092,
            47043,
            47151,
            47263,
            47166,
            47016,
            47207,
            47440,
            47183,
            47180,
            47449,
            49321,
            49004,
            47398,
            47314,
            47256,
            47320,
            47242,
            47104,
            47284,
            47235,
            47413,
            47092,
            47310,
            47212,
            47504,
            46962,
            47264,
            47337,
            48940,
            48969,
            47366,
            47192,
            47520,
            47408,
            47187,
            47173
          ],
          [
            48163,
            49332,
            48869,
            47341,
            47251,
            47171,
            47343,
            47264,
            47261,
            47401,
            47181,
            47209,
            47316,
            47154,
            47131,
            47480,
            47195,
            47287,
            47337,
            47617,
            47668,
            47402,
            47113,
            47237,
            47173,
            47332,
            47092,
            47043,
            47151,
            47263,
            47166,
            47016,
            47207,
            47440,
            47183,
            47180,
            47449,
            49321,
            49004,
            47398,
            47314,
            47256,
            47320,
            47242,
            47104,
            47284,
            47235,
            47413,
            47092,
            47310,
            47212,
            47504,
            46962,
            47264,
            47337,
            48940,
            48969,
            47366,
            47192,
            47520,
            47408,
            47187,
            47173
          ],
          [
            48163,
            49332,
            48869,
            47341,
            47251,
            47171,
            47343,
            47264,
            47261,
            47401,
            47181,
            47209,
            47316,
            47154,
            47131,
            47480,
            47195,
            47287,
            47337,
            47617,
            47668,
            47402,
            47113,
            47237,
            47173,
            47332,
            47092,
            47043,
            47151,
            47263,
            47166,
            47016,
            47207,
            47440,
            47183,
            47180,
            47449,
            49321,
            49004,
            47398,
            47314,
            47256,
            47320,
            47242,
            47104,
            47284,
            47235,
            47413,
            47092,
            47310,
            47212,
            47504,
            46962,
            47264,
            47337,
            48940,
            48969,
            47366,
            47192,
            47520,
            47408,
            47187,
            47173
          ],
          [
            48163,
            49332,
            48869,
            47341,
            47251,
            47171,
            47343,
            47264,
            47261,
            47401,
            47181,
            47209,
            47316,
            47154,
            47131,
            47480,
            47195,
            47287,
            47337,
            47617,
            47668,
            47402,
            47113,
            47237,
            47173,
            47332,
            47092,
            47043,
            47151,
            47263,
            47166,
            47016,
            47207,
            47440,
            47183,
            47180,
            47449,
            49321,
            49004,
            47398,
            47314,
            47256,
            47320,
            47242,
            47104,
            47284,
            47235,
            47413,
            47092,
            47310,
            47212,
            47504,
            46962,
            47264,
            47337,
            48940,
            48969,
            47366,
            47192,
            47520,
            47408,
            47187,
            47173
          ],
          [
            48163,
            49332,
            48869,
            47341,
            47251,
            47171,
            47343,
            47264,
            47261,
            47401,
            47181,
            47209,
            47316,
            47154,
            47131,
            47480,
            47195,
            47287,
            47337,
            47617,
            47668,
            47402,
            47113,
            47237,
            47173,
            47332,
            47092,
            47043,
            47151,
            47263,
            47166,
            47016,
            47207,
            47440,
            47183,
            47180,
            47449,
            49321,
            49004,
            47398,
            47314,
            47256,
            47320,
            47242,
            47104,
            47284,
            47235,
            47413,
            47092,
            47310,
            47212,
            47504,
            46962,
            47264,
            47337,
            48940,
            48969,
            47366,
            47192,
            47520,
            47408,
            47187,
            47173
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            47,
            760,
            3981,
            15403,
            28009,
            34113,
            33027,
            25272,
            15326,
            5572,
            1101,
            76,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            69,
            896,
            3995,
            12384,
            24190,
            37220,
            39673,
            28537,
            14800,
            3662,
            514,
            25,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            35
          ],
          [
            0,
            5,
            144,
            1385,
            7131,
            19708,
            36759,
            40233,
            34856,
            22473,
            10489,
            2560,
            231,
            18,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            21,
            347,
            2202,
            8421,
            21203,
            35992,
            43902,
            41700,
            28715,
            13692,
            2879,
            216,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            51,
            516,
            3191,
            8820,
            19779,
            34432,
            37626
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            47,
            832,
            6499,
            20385,
            33647,
            38290,
            32136,
            15668,
            3695,
            271,
            24,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            26,
            470,
            5216,
            17205,
            34670,
            41413,
            34104,
            19555,
            6259,
            947,
            85,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            110,
            1434,
            9746,
            25743,
            38966,
            41760,
            34316,
            18130,
            5531,
            665,
            60,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            138,
            2081,
            8267,
            21089,
            33923,
            41645,
            35748,
            22458,
            9845,
            2076,
            235,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            7,
            211,
            1983,
            10581,
            24848,
            37983,
            39418,
            34485,
            27488,
            16932,
            6323,
            1494,
            125,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            30,
            636,
            3356,
            11588,
            25038,
            36138,
            43036,
            42956,
            30569,
            14903,
            4525,
            698,
            36,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            221,
            1549,
            6560,
            16544,
            29768
          ]
        ]
      },
      "call": {
        "duration": 0.27105656300045666,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001496974000474438,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.32]",
      "lineno": 356,
      "outcome": "passed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.291333476001455,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1690657469989674,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0014772029971936718,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 1.3567140870000003,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            1,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            127,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            3,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            34,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            239,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          4,
          5,
          5,
          5,
          4,
          5
        ],
        "second_max_width": [
          3,
          5,
          4,
          4,
          3,
          4
        ]
      },
      "call": {
        "duration": 0.003510349000862334,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029033449973212555,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.2]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.2]",
        "pytestmark",
        "1.2",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5366986049994011,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            255,
            0,
            255,
            4,
            255,
            3,
            62,
            0,
            255,
            0,
            255,
            255
          ],
          [
            58,
            0,
            22,
            0,
            2,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            40,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            191,
            255,
            0,
            16,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            12,
            0,
            1,
            0,
            8,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            255,
            20,
            255,
            43,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            0,
            255,
            2,
            255,
            5,
            3,
            0,
            255,
            1,
            255,
            255
          ],
          [
            67,
            0,
            2,
            0,
            9,
            0,
            255,
            173,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            135,
            255,
            1,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            255,
            0,
            8,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            53,
            0,
            5,
            0,
            11,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            1,
            255,
            100,
            255,
            53,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ]
        ],
        "maxwidth": [
          4,
          5,
          4,
          4,
          4,
          4
        ],
        "second_max_width": [
          4,
          5,
          4,
          4,
          4,
          4
        ]
      },
      "call": {
        "duration": 0.003466758000286063,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0028938049981661607,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.2]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29651975199885783,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48276,
            47589,
            47457,
            47362,
            47436,
            47439,
            47526,
            47411,
            47628,
            47139,
            47141,
            47321,
            47668,
            47392,
            47558,
            47519,
            47520,
            47447,
            47482,
            47385,
            47383,
            47574,
            47596,
            47524,
            49453,
            47451,
            47516,
            47578,
            49679,
            47481,
            47350,
            47464,
            47408,
            47579,
            47542,
            47410,
            47384,
            47552,
            47459,
            47658,
            47483,
            47647,
            47510,
            47701,
            47677,
            47636,
            47450,
            47386,
            47415,
            47410,
            47400,
            47680,
            47614,
            47584,
            47445,
            49206,
            47540,
            47825,
            47533,
            49417,
            47319,
            47618,
            47611
          ],
          [
            48276,
            47589,
            47457,
            47362,
            47436,
            47439,
            47526,
            47411,
            47628,
            47139,
            47141,
            47321,
            47668,
            47392,
            47558,
            47519,
            47520,
            47447,
            47482,
            47385,
            47383,
            47574,
            47596,
            47524,
            49453,
            47451,
            47516,
            47578,
            49679,
            47481,
            47350,
            47464,
            47408,
            47579,
            47542,
            47410,
            47384,
            47552,
            47459,
            47658,
            47483,
            47647,
            47510,
            47701,
            47677,
            47636,
            47450,
            47386,
            47415,
            47410,
            47400,
            47680,
            47614,
            47584,
            47445,
            49206,
            47540,
            47825,
            47533,
            49417,
            47319,
            47618,
            47611
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            15,
            509,
            6954,
            24683,
            39358,
            34287,
            14699,
            2920,
            211,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            39,
            566,
            6028,
            22720,
            38682,
            37569,
            20989,
            4787,
            479,
            21,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            2,
            122,
            2015,
            14519,
            33072,
            40625,
            29170,
            9364,
            1437,
            120,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            29,
            600,
            5901,
            22662,
            38723,
            41485,
            30372,
            11699,
            2191,
            175,
            36,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            33,
            866,
            8596,
            25851,
            40437,
            43594
          ]
        ]
      },
      "call": {
        "duration": 0.13411304500186816,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0016337170018232428,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.2]",
      "lineno": 330,
      "outcome": "failed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.2]",
        "pytestmark",
        "1.2",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.06915817399931257,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            47726,
            47325,
            47387,
            47399,
            47017,
            47437,
            47606,
            47444,
            47470,
            47379,
            49019,
            47589,
            47225,
            47430,
            47415,
            47381,
            47195,
            47280,
            47364,
            47258,
            47250,
            47350,
            47491,
            47413,
            47379,
            47379,
            47362,
            47768,
            47466,
            47511,
            47151,
            47325,
            47238,
            47364,
            47211,
            47379,
            47326,
            47296,
            47412,
            47498,
            47371,
            47424,
            47351,
            47509,
            47721,
            47374,
            47250,
            47452,
            47296,
            47270,
            47377,
            47473,
            47249,
            47036,
            47312,
            47421,
            47351,
            47495,
            47380,
            47413,
            47454,
            47423,
            47363
          ],
          [
            47726,
            47325,
            47387,
            47399,
            47017,
            47437,
            47606,
            47444,
            47470,
            47379,
            49019,
            47589,
            47225,
            47430,
            47415,
            47381,
            47195,
            47280,
            47364,
            47258,
            47250,
            47350,
            47491,
            47413,
            47379,
            47379,
            47362,
            47768,
            47466,
            47511,
            47151,
            47325,
            47238,
            47364,
            47211,
            47379,
            47326,
            47296,
            47412,
            47498,
            47371,
            47424,
            47351,
            47509,
            47721,
            47374,
            47250,
            47452,
            47296,
            47270,
            47377,
            47473,
            47249,
            47036,
            47312,
            47421,
            47351,
            47495,
            47380,
            47413,
            47454,
            47423,
            47363
          ],
          [
            47726,
            47325,
            47387,
            47399,
            47017,
            47437,
            47606,
            47444,
            47470,
            47379,
            49019,
            47589,
            47225,
            47430,
            47415,
            47381,
            47195,
            47280,
            47364,
            47258,
            47250,
            47350,
            47491,
            47413,
            47379,
            47379,
            47362,
            47768,
            47466,
            47511,
            47151,
            47325,
            47238,
            47364,
            47211,
            47379,
            47326,
            47296,
            47412,
            47498,
            47371,
            47424,
            47351,
            47509,
            47721,
            47374,
            47250,
            47452,
            47296,
            47270,
            47377,
            47473,
            47249,
            47036,
            47312,
            47421,
            47351,
            47495,
            47380,
            47413,
            47454,
            47423,
            47363
          ],
          [
            47726,
            47325,
            47387,
            47399,
            47017,
            47437,
            47606,
            47444,
            47470,
            47379,
            49019,
            47589,
            47225,
            47430,
            47415,
            47381,
            47195,
            47280,
            47364,
            47258,
            47250,
            47350,
            47491,
            47413,
            47379,
            47379,
            47362,
            47768,
            47466,
            47511,
            47151,
            47325,
            47238,
            47364,
            47211,
            47379,
            47326,
            47296,
            47412,
            47498,
            47371,
            47424,
            47351,
            47509,
            47721,
            47374,
            47250,
            47452,
            47296,
            47270,
            47377,
            47473,
            47249,
            47036,
            47312,
            47421,
            47351,
            47495,
            47380,
            47413,
            47454,
            47423,
            47363
          ],
          [
            47726,
            47325,
            47387,
            47399,
            47017,
            47437,
            47606,
            47444,
            47470,
            47379,
            49019,
            47589,
            47225,
            47430,
            47415,
            47381,
            47195,
            47280,
            47364,
            47258,
            47250,
            47350,
            47491,
            47413,
            47379,
            47379,
            47362,
            47768,
            47466,
            47511,
            47151,
            47325,
            47238,
            47364,
            47211,
            47379,
            47326,
            47296,
            47412,
            47498,
            47371,
            47424,
            47351,
            47509,
            47721,
            47374,
            47250,
            47452,
            47296,
            47270,
            47377,
            47473,
            47249,
            47036,
            47312,
            47421,
            47351,
            47495,
            47380,
            47413,
            47454,
            47423,
            47363
          ]
        ],
        "eTX_errcounts": [
          [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            237,
            1710,
            6805,
            15485,
            26848,
            37102,
            35382,
            24963,
            11792,
            2861,
            323,
            15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            80,
            871,
            4107,
            12585,
            23807,
            32549,
            33069,
            28332,
            19595,
            10542,
            3950,
            730,
            61,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            16,
            238,
            1622,
            5394,
            12754,
            24897,
            37221,
            43384,
            38506,
            23212,
            9373,
            2029,
            270,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            33,
            488,
            2804,
            7020,
            15263,
            29346,
            38998,
            36499,
            27094,
            14089,
            4211,
            830,
            60,
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            12,
            82
          ],
          [
            11352,
            3660,
            428,
            23,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            91,
            1485,
            8071,
            20407,
            32715,
            39524,
            31106,
            15736,
            5571,
            981,
            42,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            80,
            874,
            5481,
            15503,
            28161,
            35942,
            32366,
            21942,
            8612,
            1810,
            179,
            6,
            0,
            0,
            0,
            0
          ],
          [
            50,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            48,
            999,
            6063,
            16145,
            27549,
            38544,
            40957,
            32135,
            21115,
            9806,
            3023,
            363,
            10,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            9,
            113,
            911,
            4557,
            14866,
            27409,
            34759,
            32678,
            23268,
            11327,
            3629,
            787,
            49,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            138,
            1565,
            5621,
            16035,
            27495,
            36579,
            40867,
            37995,
            25804,
            14930,
            4645,
            729,
            71,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            42,
            557,
            2671,
            7720,
            17346,
            30439,
            37381,
            36783,
            30788,
            22953,
            13505,
            5386,
            1393,
            98,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3
          ]
        ]
      },
      "call": {
        "duration": 0.27370664199770545,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 354,
          "message": "assert False\n +  where False = <built-in method all of numpy.ndarray object at 0xffff7fab25d0>()\n +    where <built-in method all of numpy.ndarray object at 0xffff7fab25d0> = array([13, 12, 15, 13, 10]) >= 12.all"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 354,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECONT = <utils.io.IO object at 0xffff7fc8d640>, out_of_reset = None, eTX_delay_scan_setup_ECONT = None\njson_metadata = {'eTX_bitcounts': [[47726, 47325, 47387, 47399, 47017, 47437, ...], [47726, 47325, 47387, 47399, 47017, 47437, ...], [..., ...], [0, 0, 0, 0, 0, 1, ...], [11352, 3660, 428, 23, 0, 0, ...], [50, 0, 0, 0, 0, 0, ...], [0, 0, 0, 0, 0, 0, ...]]}\n\n    @pytest.mark.ECONT\n    def test_eTX_delayscan_ECONT(\n        set_voltage,\n        from_IO_ECONT,\n        out_of_reset,\n        eTX_delay_scan_setup_ECONT,\n        json_metadata\n    ):\n        \"\"\"\n        Scan the delays in \"from_IO\" and measure the bit error rate for each delay.\n        \"\"\"\n        delays, bitcounts, errcounts = from_IO_ECONT.delay_scan()\n        json_metadata[\"eTX_delays\"] = delays.tolist()\n        json_metadata[\"eTX_bitcounts\"] = bitcounts.tolist()\n        json_metadata[\"eTX_errcounts\"] = errcounts.tolist()\n    \n        max_width, second_max_width = get_max_width(errcounts.T, num_channels=5, padding=10)\n    \n        # pprint(errcounts.T)\n        # pprint(max_width)\n        # pprint(second_max_width)\n    \n        assert (max_width >= 13).all()  ## values previously use in ECONT qc_test\n>       assert (second_max_width >= 12).all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0xffff7fab25d0>()\nE        +    where <built-in method all of numpy.ndarray object at 0xffff7fab25d0> = array([13, 12, 15, 13, 10]) >= 12.all\n\ntest_io.py:354: AssertionError"
      },
      "teardown": {
        "duration": 0.0016120859982038382,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.2]",
      "lineno": 356,
      "outcome": "failed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29215159400337143,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1706689829989045,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 393,
          "message": "AssertionError: ((40045888, 10011472), (411169, 411169), (40048566, 10012142))\nassert ((40045888 > 0 and 10011472 == 0\n  +10011472\n  -0))"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 393,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECOND = <utils.io.IO object at 0xffff7fc8d310>, sc_ECOND = <utils.streamcompare.StreamCompare object at 0xffff7fa200d0>, out_of_reset = None, eTX_delay_scan_setup_ECOND = None\ni2c_ECOND = <econ_i2c.ECON_I2C object at 0xffff7fda6400>, json_metadata = {}\n\n    @pytest.mark.ECOND\n    def test_eTx_PRBS7_ECOND(\n        set_voltage,\n        from_IO_ECOND,\n        sc_ECOND,\n        out_of_reset,\n        eTX_delay_scan_setup_ECOND,\n        i2c_ECOND,\n        json_metadata,\n    ):\n    \n        sleep_time = 1\n    \n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 1}}})\n        from_IO_ECOND.reset_links()\n        from_IO_ECOND.setup(invert=[0,0], align=1)\n        time.sleep(0.1)\n    \n        def check_prbs7_sc(sc, sleep_time):\n            sc.reset_counters()\n            time.sleep(sleep_time)\n            sc.latch_counters()\n            word_count, err_count = sc.read_both_counters()\n            return word_count, err_count\n    \n        #check initially\n        word_count_1, err_count_1 = check_prbs7_sc(sc_ECOND, sleep_time)\n    \n        #turn off prbs and check it is all errors\n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 0}}})\n        word_count_2, err_count_2 = check_prbs7_sc(sc_ECOND, min(sleep_time, 0.01))\n    \n        #turn prbs back on, and check we're error free again\n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 1}}})\n        word_count_3, err_count_3 = check_prbs7_sc(sc_ECOND, sleep_time)\n    \n>       assert ((word_count_1 > 0 and err_count_1 == 0) and\n                (word_count_2 > 0 and err_count_2 == word_count_2) and\n                (word_count_3 > 0 and err_count_3 == 0)), ((word_count_1, err_count_1),\n                                                           (word_count_2, err_count_2),\n                                                           (word_count_3, err_count_3))\nE       AssertionError: ((40045888, 10011472), (411169, 411169), (40048566, 10012142))\nE       assert ((40045888 > 0 and 10011472 == 0\nE         +10011472\nE         -0))\n\ntest_io.py:393: AssertionError"
      },
      "teardown": {
        "duration": 0.005066572997748153,
        "outcome": "passed"
      }
    }
  ],
  "FPGA-hexa-IP": "11",
  "branch": "DN_CMtester_IO",
  "commit_hash": "4f4f43d62e25add927a484f024c3e2e08d3482d8",
  "remote_url": "ssh://git@gitlab.cern.ch:7999/hgcal-daq-sw/econd-sw.git",
  "status": "M common_pytest/fixtures.py\u0000 M gpib_controls\u0000 M test_mezzanine/conftest.py\u0000 M test_mezzanine/pytest.ini\u0000 M test_mezzanine/test_io.py\u0000 M utils/gpibclient.py\u0000?? econ_i2c.py.orig\u0000?? test_mezzanine/tmp.py\u0000?? test_radiation/conftest.py.orig\u0000?? test_vectors/\u0000?? utils/align.py.orig\u0000?? utils/io.py.orig\u0000",
  "firmware_name": "econ-mezz-tester-kria.bit\u0000",
  "firmware_git_desc": "9e5953f-dirty",
  "chip_number": null
}