{
  "created": 1722029308.1385195,
  "duration": 35.192439794540405,
  "exitcode": 1,
  "root": "/home/jsw/mezz/econd-sw/test_mezzanine",
  "environment": {},
  "summary": {
    "passed": 30,
    "failed": 3,
    "total": 33,
    "collected": 33
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_i2c.py",
          "type": "Module"
        },
        {
          "nodeid": "test_io.py",
          "type": "Module"
        },
        {
          "nodeid": "test_packet_econd.py",
          "type": "Module"
        }
      ]
    },
    {
      "nodeid": "test_i2c.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_D[0]",
          "type": "Function",
          "lineno": 34
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_D[255]",
          "type": "Function",
          "lineno": 34
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_T[0]",
          "type": "Function",
          "lineno": 58
        },
        {
          "nodeid": "test_i2c.py::test_rw_allregisters_T[255]",
          "type": "Function",
          "lineno": 58
        },
        {
          "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_D",
          "type": "Function",
          "lineno": 84
        },
        {
          "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_T",
          "type": "Function",
          "lineno": 107
        },
        {
          "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_D",
          "type": "Function",
          "lineno": 130
        },
        {
          "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_T",
          "type": "Function",
          "lineno": 153
        },
        {
          "nodeid": "test_i2c.py::test_wrong_reg_address_D",
          "type": "Function",
          "lineno": 176
        },
        {
          "nodeid": "test_i2c.py::test_wrong_reg_address_T",
          "type": "Function",
          "lineno": 200
        },
        {
          "nodeid": "test_i2c.py::test_wrong_i2c_address_D",
          "type": "Function",
          "lineno": 224
        },
        {
          "nodeid": "test_i2c.py::test_wrong_i2c_address_T",
          "type": "Function",
          "lineno": 237
        },
        {
          "nodeid": "test_i2c.py::test_hold_hard_reset_D",
          "type": "Function",
          "lineno": 250
        },
        {
          "nodeid": "test_i2c.py::test_hold_hard_reset_T",
          "type": "Function",
          "lineno": 264
        },
        {
          "nodeid": "test_i2c.py::test_hold_soft_reset_D",
          "type": "Function",
          "lineno": 278
        },
        {
          "nodeid": "test_i2c.py::test_hold_soft_reset_T",
          "type": "Function",
          "lineno": 299
        },
        {
          "nodeid": "test_i2c.py::test_chip_sync_D",
          "type": "Function",
          "lineno": 320
        },
        {
          "nodeid": "test_i2c.py::test_chip_sync_T",
          "type": "Function",
          "lineno": 341
        }
      ]
    },
    {
      "nodeid": "test_io.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.08]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.32]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
          "type": "Function",
          "lineno": 246
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.08]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.32]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.2]",
          "type": "Function",
          "lineno": 274
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.08]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.32]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.2]",
          "type": "Function",
          "lineno": 303
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.08]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.32]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.2]",
          "type": "Function",
          "lineno": 330
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.08]",
          "type": "Function",
          "lineno": 356
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.32]",
          "type": "Function",
          "lineno": 356
        },
        {
          "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.2]",
          "type": "Function",
          "lineno": 356
        }
      ]
    },
    {
      "nodeid": "test_packet_econd.py",
      "outcome": "passed",
      "result": []
    }
  ],
  "tests": [
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_D[0]",
      "lineno": 34,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_D[0]",
        "pytestmark",
        "0",
        "parametrize",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5035457230005704,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14897198300241143,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0013223399982962292,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_D[255]",
      "lineno": 34,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_D[255]",
        "pytestmark",
        "255",
        "parametrize",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003810385001997929,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14809521400093217,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001315708999754861,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_T[0]",
      "lineno": 58,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_T[0]",
        "pytestmark",
        "0",
        "parametrize",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.131795190001867,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12233750900122686,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012768280030286405,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_rw_allregisters_T[255]",
      "lineno": 58,
      "outcome": "passed",
      "keywords": [
        "test_rw_allregisters_T[255]",
        "pytestmark",
        "255",
        "parametrize",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003796585002419306,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12163414399765315,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001287569000851363,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_D",
      "lineno": 84,
      "outcome": "passed",
      "keywords": [
        "test_hard_reset_i2c_allregisters_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033515549985168036,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.1482407770017744,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011950770021940116,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hard_reset_i2c_allregisters_T",
      "lineno": 107,
      "outcome": "passed",
      "keywords": [
        "test_hard_reset_i2c_allregisters_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033307340017927345,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12133632699988084,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012244179997651372,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_D",
      "lineno": 130,
      "outcome": "passed",
      "keywords": [
        "test_soft_reset_i2c_allregisters_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033754649994079955,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.1476789539992751,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001226366999617312,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_soft_reset_i2c_allregisters_T",
      "lineno": 153,
      "outcome": "passed",
      "keywords": [
        "test_soft_reset_i2c_allregisters_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033681749991956167,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12129528600053163,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001197087000036845,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_reg_address_D",
      "lineno": 176,
      "outcome": "passed",
      "keywords": [
        "test_wrong_reg_address_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.004432929003087338,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0021129769993422087,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011512450000736862,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_reg_address_T",
      "lineno": 200,
      "outcome": "passed",
      "keywords": [
        "test_wrong_reg_address_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033669149997876957,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0017534189973957837,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0010985340013576206,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_i2c_address_D",
      "lineno": 224,
      "outcome": "passed",
      "keywords": [
        "test_wrong_i2c_address_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003317564001918072,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.004102921997400699,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722029281.5006044,
            "msecs": 500.60439109802246,
            "relativeCreated": 10576.532125473022,
            "thread": 281473876557856,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 3977
          }
        ]
      },
      "teardown": {
        "duration": 0.0012154169999121223,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_wrong_i2c_address_T",
      "lineno": 237,
      "outcome": "passed",
      "keywords": [
        "test_wrong_i2c_address_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003375255000719335,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0023724830025457777,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722029281.5129242,
            "msecs": 512.9241943359375,
            "relativeCreated": 10588.851928710938,
            "thread": 281473876557856,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 3977
          }
        ]
      },
      "teardown": {
        "duration": 0.0011910559987882152,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_hard_reset_D",
      "lineno": 250,
      "outcome": "passed",
      "keywords": [
        "test_hold_hard_reset_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.002078956000332255,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.002741280997724971,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722029281.5223804,
            "msecs": 522.3803520202637,
            "relativeCreated": 10598.308086395264,
            "thread": 281473876557856,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 3977
          }
        ]
      },
      "teardown": {
        "duration": 0.0010466639978403691,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_hard_reset_T",
      "lineno": 264,
      "outcome": "passed",
      "keywords": [
        "test_hold_hard_reset_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.009088342998438748,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.0035851400025421754,
        "outcome": "passed",
        "log": [
          {
            "name": "Xil_i2c_bus_2",
            "msg": "Error occurred during read: ",
            "args": null,
            "levelname": "ERROR",
            "levelno": 40,
            "pathname": "/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py",
            "filename": "hexactrl_io.py",
            "module": "hexactrl_io",
            "exc_info": null,
            "exc_text": "Traceback (most recent call last):\n  File \"/home/jsw/mezz/econd-sw/test_mezzanine/../econ_tools/swamp/hexactrl_io.py\", line 125, in read\n    self.bus.i2c_rdwr(read)\n  File \"/home/jsw/.local/lib/python3.9/site-packages/smbus2/smbus2.py\", line 658, in i2c_rdwr\n    ioctl(self.fd, I2C_RDWR, ioctl_data)\nOSError: [Errno 5] Input/output error",
            "stack_info": null,
            "lineno": 128,
            "funcName": "read",
            "created": 1722029281.5389867,
            "msecs": 538.9866828918457,
            "relativeCreated": 10614.914417266846,
            "thread": 281473876557856,
            "threadName": "MainThread",
            "processName": "MainProcess",
            "process": 3977
          }
        ]
      },
      "teardown": {
        "duration": 0.0011644759979390074,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_soft_reset_D",
      "lineno": 278,
      "outcome": "passed",
      "keywords": [
        "test_hold_soft_reset_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.003418876000068849,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14782298799764249,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012082769972039387,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_hold_soft_reset_T",
      "lineno": 299,
      "outcome": "passed",
      "keywords": [
        "test_hold_soft_reset_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0033585749988560565,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12127737500122748,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0011791459983214736,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_chip_sync_D",
      "lineno": 320,
      "outcome": "passed",
      "keywords": [
        "test_chip_sync_D",
        "pytestmark",
        "ECOND",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.17597405500055174,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.14851021300273715,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012958490005985368,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_i2c.py::test_chip_sync_T",
      "lineno": 341,
      "outcome": "passed",
      "keywords": [
        "test_chip_sync_T",
        "pytestmark",
        "ECONT",
        "test_i2c.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.015279881001333706,
        "outcome": "passed"
      },
      "call": {
        "duration": 0.12201149099928443,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0012741280006594025,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.08]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 4.736064050997811,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            1,
            6,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            166,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            1,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            35,
            174,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          5,
          5,
          4,
          5,
          5,
          5
        ],
        "second_max_width": [
          4,
          4,
          4,
          5,
          5,
          4
        ]
      },
      "call": {
        "duration": 0.003686931999254739,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.00293634600166115,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.08]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.08]",
        "pytestmark",
        "1.08",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.9025167940017127,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            3,
            0,
            0,
            0,
            0
          ],
          [
            0,
            19,
            0,
            1,
            0,
            33,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            7,
            255,
            2,
            255,
            0,
            0,
            0,
            0,
            0,
            2
          ],
          [
            253,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            217,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            0,
            255,
            31,
            255,
            255,
            255,
            3
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            30,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            13,
            87,
            0,
            0,
            0,
            0
          ],
          [
            0,
            6,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            114,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            139,
            255,
            255,
            255,
            255,
            0,
            0,
            114,
            0,
            95,
            255
          ],
          [
            255,
            0,
            122,
            0,
            255,
            0,
            221,
            49,
            255,
            255,
            255,
            1
          ]
        ],
        "maxwidth": [
          5,
          4,
          5,
          5,
          5,
          4
        ],
        "second_max_width": [
          4,
          3,
          3,
          3,
          3,
          3
        ]
      },
      "call": {
        "duration": 0.0035187489993404597,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0028953049986739643,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.08]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.3028182049965835,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48591,
            47748,
            47676,
            47846,
            47662,
            47722,
            47609,
            47704,
            47572,
            47748,
            47618,
            47796,
            47748,
            47594,
            47388,
            47295,
            47710,
            49623,
            47616,
            47993,
            47806,
            47851,
            47741,
            47783,
            47776,
            47673,
            47760,
            47597,
            47615,
            47612,
            47756,
            47600,
            47689,
            47564,
            47600,
            47804,
            47696,
            47604,
            47832,
            47718,
            47916,
            47740,
            47764,
            47788,
            48018,
            47703,
            49816,
            47789,
            47605,
            47713,
            47667,
            47665,
            47803,
            47785,
            47708,
            47655,
            47737,
            47846,
            47700,
            47831,
            47786,
            47743,
            47817
          ],
          [
            48591,
            47748,
            47676,
            47846,
            47662,
            47722,
            47609,
            47704,
            47572,
            47748,
            47618,
            47796,
            47748,
            47594,
            47388,
            47295,
            47710,
            49623,
            47616,
            47993,
            47806,
            47851,
            47741,
            47783,
            47776,
            47673,
            47760,
            47597,
            47615,
            47612,
            47756,
            47600,
            47689,
            47564,
            47600,
            47804,
            47696,
            47604,
            47832,
            47718,
            47916,
            47740,
            47764,
            47788,
            48018,
            47703,
            49816,
            47789,
            47605,
            47713,
            47667,
            47665,
            47803,
            47785,
            47708,
            47655,
            47737,
            47846,
            47700,
            47831,
            47786,
            47743,
            47817
          ]
        ],
        "eTX_errcounts": [
          [
            40857,
            28871,
            9313,
            1547,
            147,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            261,
            2492,
            14173,
            33178,
            42388,
            33269,
            16101,
            2771,
            133,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            18,
            651,
            6490,
            23674,
            40186,
            38676,
            21433,
            6552,
            706,
            37,
            0,
            0,
            0
          ],
          [
            13,
            11,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            12,
            210,
            3501,
            15207,
            34457,
            42258,
            33585,
            15464,
            3863,
            380,
            40,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            301,
            3576,
            17583,
            34936,
            43186,
            36938,
            18617,
            4095,
            489,
            30,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "call": {
        "duration": 0.13520722599787405,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0016294859997287858,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.08]",
      "lineno": 330,
      "outcome": "failed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.08]",
        "pytestmark",
        "1.08",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.0744009099980758,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48200,
            47493,
            47655,
            47600,
            47640,
            47384,
            47638,
            47612,
            47854,
            48035,
            47536,
            47503,
            47450,
            47481,
            47539,
            47690,
            47632,
            47502,
            47682,
            47466,
            47612,
            47536,
            47498,
            47605,
            47524,
            49250,
            47960,
            47626,
            47534,
            47307,
            47479,
            47465,
            47599,
            47684,
            47735,
            47567,
            47595,
            47535,
            47497,
            47666,
            47488,
            47446,
            49418,
            49318,
            47719,
            47477,
            47629,
            47549,
            47527,
            47753,
            47410,
            47544,
            47542,
            47540,
            47319,
            47693,
            47450,
            47697,
            47580,
            49469,
            49208,
            47592,
            47427
          ],
          [
            48200,
            47493,
            47655,
            47600,
            47640,
            47384,
            47638,
            47612,
            47854,
            48035,
            47536,
            47503,
            47450,
            47481,
            47539,
            47690,
            47632,
            47502,
            47682,
            47466,
            47612,
            47536,
            47498,
            47605,
            47524,
            49250,
            47960,
            47626,
            47534,
            47307,
            47479,
            47465,
            47599,
            47684,
            47735,
            47567,
            47595,
            47535,
            47497,
            47666,
            47488,
            47446,
            49418,
            49318,
            47719,
            47477,
            47629,
            47549,
            47527,
            47753,
            47410,
            47544,
            47542,
            47540,
            47319,
            47693,
            47450,
            47697,
            47580,
            49469,
            49208,
            47592,
            47427
          ],
          [
            48200,
            47493,
            47655,
            47600,
            47640,
            47384,
            47638,
            47612,
            47854,
            48035,
            47536,
            47503,
            47450,
            47481,
            47539,
            47690,
            47632,
            47502,
            47682,
            47466,
            47612,
            47536,
            47498,
            47605,
            47524,
            49250,
            47960,
            47626,
            47534,
            47307,
            47479,
            47465,
            47599,
            47684,
            47735,
            47567,
            47595,
            47535,
            47497,
            47666,
            47488,
            47446,
            49418,
            49318,
            47719,
            47477,
            47629,
            47549,
            47527,
            47753,
            47410,
            47544,
            47542,
            47540,
            47319,
            47693,
            47450,
            47697,
            47580,
            49469,
            49208,
            47592,
            47427
          ],
          [
            48200,
            47493,
            47655,
            47600,
            47640,
            47384,
            47638,
            47612,
            47854,
            48035,
            47536,
            47503,
            47450,
            47481,
            47539,
            47690,
            47632,
            47502,
            47682,
            47466,
            47612,
            47536,
            47498,
            47605,
            47524,
            49250,
            47960,
            47626,
            47534,
            47307,
            47479,
            47465,
            47599,
            47684,
            47735,
            47567,
            47595,
            47535,
            47497,
            47666,
            47488,
            47446,
            49418,
            49318,
            47719,
            47477,
            47629,
            47549,
            47527,
            47753,
            47410,
            47544,
            47542,
            47540,
            47319,
            47693,
            47450,
            47697,
            47580,
            49469,
            49208,
            47592,
            47427
          ],
          [
            48200,
            47493,
            47655,
            47600,
            47640,
            47384,
            47638,
            47612,
            47854,
            48035,
            47536,
            47503,
            47450,
            47481,
            47539,
            47690,
            47632,
            47502,
            47682,
            47466,
            47612,
            47536,
            47498,
            47605,
            47524,
            49250,
            47960,
            47626,
            47534,
            47307,
            47479,
            47465,
            47599,
            47684,
            47735,
            47567,
            47595,
            47535,
            47497,
            47666,
            47488,
            47446,
            49418,
            49318,
            47719,
            47477,
            47629,
            47549,
            47527,
            47753,
            47410,
            47544,
            47542,
            47540,
            47319,
            47693,
            47450,
            47697,
            47580,
            49469,
            49208,
            47592,
            47427
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            30,
            781,
            4051,
            11832,
            22850,
            30559,
            32852,
            29487,
            22559,
            13157,
            4196,
            574,
            41,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            128,
            1298,
            4522,
            10294,
            21374,
            34158,
            41612,
            34332,
            24013,
            12847,
            4100,
            636,
            65,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            1,
            31,
            420,
            2423,
            9058,
            19688,
            31232,
            36302,
            35392,
            28575,
            17185,
            7488,
            1928,
            258,
            13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            10,
            111,
            1027,
            4341,
            9731,
            18272,
            29829,
            40330,
            41134,
            31219,
            21006,
            9239,
            1716,
            202,
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            104,
            911,
            4553,
            11500,
            21071
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            114,
            1204,
            5448,
            14468,
            27197,
            35382,
            33892,
            25922,
            15114,
            5666,
            1038,
            93,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            67,
            751,
            5261,
            15062,
            29285,
            34722,
            32597,
            26507,
            16875,
            5849,
            989,
            20,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            12,
            238,
            1791,
            7317,
            16227,
            28403,
            37472,
            37136,
            28370,
            16430,
            5186,
            791,
            17,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            20,
            358,
            1916,
            5322,
            13504,
            28627,
            37945,
            37193,
            31075,
            20397,
            8766,
            2282,
            169,
            11,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            9,
            99,
            664,
            2868,
            7677,
            17988,
            30531,
            37849,
            37634,
            33186,
            25444,
            13124,
            4170,
            852,
            54,
            4,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            8,
            91,
            874,
            3963,
            9107,
            16180,
            27525,
            39274,
            42333,
            37265,
            27209,
            15425,
            5444,
            1249,
            165,
            21,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            44,
            505,
            2223,
            6897
          ]
        ]
      },
      "call": {
        "duration": 0.27376126700255554,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 353,
          "message": "assert False\n +  where False = <built-in method all of numpy.ndarray object at 0xffffa448cf30>()\n +    where <built-in method all of numpy.ndarray object at 0xffffa448cf30> = array([22, 13, 19, 21, 11]) >= 13.all"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 353,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECONT = <utils.io.IO object at 0xffffa4480580>, out_of_reset = None, eTX_delay_scan_setup_ECONT = None\njson_metadata = {'eTX_bitcounts': [[48200, 47493, 47655, 47600, 47640, 47384, ...], [48200, 47493, 47655, 47600, 47640, 47384, ...], [...0, 0, ...], [0, 0, 1, 31, 420, 2423, ...], [0, 0, 0, 0, 0, 0, ...], [0, 0, 0, 0, 0, 0, ...], [0, 0, 0, 0, 9, 99, ...]]}\n\n    @pytest.mark.ECONT\n    def test_eTX_delayscan_ECONT(\n        set_voltage,\n        from_IO_ECONT,\n        out_of_reset,\n        eTX_delay_scan_setup_ECONT,\n        json_metadata\n    ):\n        \"\"\"\n        Scan the delays in \"from_IO\" and measure the bit error rate for each delay.\n        \"\"\"\n        delays, bitcounts, errcounts = from_IO_ECONT.delay_scan()\n        json_metadata[\"eTX_delays\"] = delays.tolist()\n        json_metadata[\"eTX_bitcounts\"] = bitcounts.tolist()\n        json_metadata[\"eTX_errcounts\"] = errcounts.tolist()\n    \n        max_width, second_max_width = get_max_width(errcounts.T, num_channels=5, padding=10)\n    \n        # pprint(errcounts.T)\n        # pprint(max_width)\n        # pprint(second_max_width)\n    \n>       assert (max_width >= 13).all()  ## values previously use in ECONT qc_test\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0xffffa448cf30>()\nE        +    where <built-in method all of numpy.ndarray object at 0xffffa448cf30> = array([22, 13, 19, 21, 11]) >= 13.all\n\ntest_io.py:353: AssertionError"
      },
      "teardown": {
        "duration": 0.0016256470007647295,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.08]",
      "lineno": 356,
      "outcome": "passed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.08]",
        "pytestmark",
        "1.08",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29307491799772833,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1694573550012137,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0014483429986285046,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.32]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 4.304536104998988,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            3,
            7,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            26,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            225,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            148,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            3,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          5,
          5,
          5,
          5,
          5,
          5
        ],
        "second_max_width": [
          4,
          5,
          4,
          3,
          3,
          4
        ]
      },
      "call": {
        "duration": 0.0035472789968480356,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029056239982310217,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.32]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.32]",
        "pytestmark",
        "1.32",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5357903830008581,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            214,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            1
          ],
          [
            5,
            255,
            210,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            118,
            255,
            155,
            255,
            164,
            0,
            0,
            255,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            0,
            138,
            4,
            255,
            44,
            255,
            11
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            78,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            0,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            255,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            5,
            255,
            223,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            251,
            255,
            144,
            255,
            255,
            5,
            0,
            164,
            0,
            255,
            255
          ],
          [
            255,
            0,
            255,
            0,
            255,
            0,
            255,
            1,
            255,
            119,
            255,
            117
          ],
          [
            1,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ]
        ],
        "maxwidth": [
          5,
          5,
          5,
          5,
          5,
          5
        ],
        "second_max_width": [
          3,
          4,
          4,
          4,
          4,
          4
        ]
      },
      "call": {
        "duration": 0.003493726999295177,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.002917505000368692,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.32]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29627482000068994,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48187,
            47902,
            47764,
            47779,
            47895,
            47841,
            47926,
            47754,
            47885,
            47989,
            47736,
            47833,
            47857,
            47934,
            47711,
            47955,
            47843,
            47843,
            47916,
            47830,
            47833,
            48251,
            47897,
            50363,
            47960,
            47704,
            47770,
            47684,
            47834,
            47779,
            47899,
            47862,
            47862,
            47880,
            47815,
            47696,
            47892,
            47772,
            47739,
            47867,
            47657,
            47742,
            47989,
            47644,
            47595,
            47940,
            47950,
            47883,
            50146,
            47828,
            47726,
            47854,
            48057,
            47743,
            47872,
            47792,
            47788,
            47699,
            47751,
            47847,
            47872,
            47830,
            47614
          ],
          [
            48187,
            47902,
            47764,
            47779,
            47895,
            47841,
            47926,
            47754,
            47885,
            47989,
            47736,
            47833,
            47857,
            47934,
            47711,
            47955,
            47843,
            47843,
            47916,
            47830,
            47833,
            48251,
            47897,
            50363,
            47960,
            47704,
            47770,
            47684,
            47834,
            47779,
            47899,
            47862,
            47862,
            47880,
            47815,
            47696,
            47892,
            47772,
            47739,
            47867,
            47657,
            47742,
            47989,
            47644,
            47595,
            47940,
            47950,
            47883,
            50146,
            47828,
            47726,
            47854,
            48057,
            47743,
            47872,
            47792,
            47788,
            47699,
            47751,
            47847,
            47872,
            47830,
            47614
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            176,
            3341,
            17374,
            36469,
            37799,
            19465,
            5068,
            412,
            34,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            90,
            2814,
            15807,
            34468,
            43035,
            26448,
            9165,
            1119,
            89,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            1107,
            8071,
            28427,
            42407,
            40039,
            20287,
            5100,
            433,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            212,
            2324,
            12945,
            31061,
            42283,
            39271,
            21753,
            5925,
            687,
            33,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      },
      "call": {
        "duration": 0.13503670200225315,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0016294859997287858,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.32]",
      "lineno": 330,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.32]",
        "pytestmark",
        "1.32",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.06916783300039242,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48511,
            47761,
            47473,
            47388,
            58810,
            47693,
            47593,
            47616,
            47546,
            47576,
            47752,
            47756,
            47636,
            47629,
            47580,
            48013,
            47749,
            47622,
            47652,
            47529,
            47298,
            47568,
            47725,
            47508,
            47502,
            47521,
            47914,
            47588,
            47522,
            47586,
            47683,
            47315,
            49449,
            47465,
            47532,
            47630,
            47549,
            47657,
            47648,
            47615,
            47769,
            47494,
            47706,
            47718,
            47711,
            47478,
            47815,
            47767,
            47941,
            47714,
            47651,
            47530,
            47448,
            47552,
            47590,
            47636,
            47546,
            47581,
            47390,
            47606,
            47709,
            47772,
            47843
          ],
          [
            48511,
            47761,
            47473,
            47388,
            58810,
            47693,
            47593,
            47616,
            47546,
            47576,
            47752,
            47756,
            47636,
            47629,
            47580,
            48013,
            47749,
            47622,
            47652,
            47529,
            47298,
            47568,
            47725,
            47508,
            47502,
            47521,
            47914,
            47588,
            47522,
            47586,
            47683,
            47315,
            49449,
            47465,
            47532,
            47630,
            47549,
            47657,
            47648,
            47615,
            47769,
            47494,
            47706,
            47718,
            47711,
            47478,
            47815,
            47767,
            47941,
            47714,
            47651,
            47530,
            47448,
            47552,
            47590,
            47636,
            47546,
            47581,
            47390,
            47606,
            47709,
            47772,
            47843
          ],
          [
            48511,
            47761,
            47473,
            47388,
            58810,
            47693,
            47593,
            47616,
            47546,
            47576,
            47752,
            47756,
            47636,
            47629,
            47580,
            48013,
            47749,
            47622,
            47652,
            47529,
            47298,
            47568,
            47725,
            47508,
            47502,
            47521,
            47914,
            47588,
            47522,
            47586,
            47683,
            47315,
            49449,
            47465,
            47532,
            47630,
            47549,
            47657,
            47648,
            47615,
            47769,
            47494,
            47706,
            47718,
            47711,
            47478,
            47815,
            47767,
            47941,
            47714,
            47651,
            47530,
            47448,
            47552,
            47590,
            47636,
            47546,
            47581,
            47390,
            47606,
            47709,
            47772,
            47843
          ],
          [
            48511,
            47761,
            47473,
            47388,
            58810,
            47693,
            47593,
            47616,
            47546,
            47576,
            47752,
            47756,
            47636,
            47629,
            47580,
            48013,
            47749,
            47622,
            47652,
            47529,
            47298,
            47568,
            47725,
            47508,
            47502,
            47521,
            47914,
            47588,
            47522,
            47586,
            47683,
            47315,
            49449,
            47465,
            47532,
            47630,
            47549,
            47657,
            47648,
            47615,
            47769,
            47494,
            47706,
            47718,
            47711,
            47478,
            47815,
            47767,
            47941,
            47714,
            47651,
            47530,
            47448,
            47552,
            47590,
            47636,
            47546,
            47581,
            47390,
            47606,
            47709,
            47772,
            47843
          ],
          [
            48511,
            47761,
            47473,
            47388,
            58810,
            47693,
            47593,
            47616,
            47546,
            47576,
            47752,
            47756,
            47636,
            47629,
            47580,
            48013,
            47749,
            47622,
            47652,
            47529,
            47298,
            47568,
            47725,
            47508,
            47502,
            47521,
            47914,
            47588,
            47522,
            47586,
            47683,
            47315,
            49449,
            47465,
            47532,
            47630,
            47549,
            47657,
            47648,
            47615,
            47769,
            47494,
            47706,
            47718,
            47711,
            47478,
            47815,
            47767,
            47941,
            47714,
            47651,
            47530,
            47448,
            47552,
            47590,
            47636,
            47546,
            47581,
            47390,
            47606,
            47709,
            47772,
            47843
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            29,
            655,
            4257,
            15038,
            27492,
            34313,
            33801,
            26916,
            15722,
            5778,
            1187,
            106,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            3,
            57,
            787,
            3667,
            11559,
            23498,
            36290,
            39897,
            25668,
            7607,
            938,
            83,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            14,
            288
          ],
          [
            0,
            7,
            124,
            1456,
            9149,
            19489,
            35996,
            40315,
            35578,
            22741,
            10352,
            2908,
            364,
            15,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            6,
            323,
            2139,
            7885,
            20794,
            35040,
            44273,
            42439,
            30042,
            14392,
            3142,
            304,
            10,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            21,
            407,
            2152,
            7217,
            17207,
            31474,
            39411,
            33680
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            61,
            853,
            5349,
            20138,
            33680,
            38669,
            32942,
            15922,
            4027,
            338,
            24,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            10,
            363,
            7477,
            27199,
            41257,
            38439,
            24050,
            9460,
            1746,
            125,
            6,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            16,
            113,
            1488,
            8765,
            25056,
            38903,
            42752,
            35205,
            19191,
            5953,
            762,
            36,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            155,
            1815,
            7663,
            19538,
            33886,
            42015,
            27776,
            13176,
            3844,
            530,
            24,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            8,
            282,
            1915,
            10056,
            25266,
            38229,
            40000,
            34860,
            27990,
            17725,
            6299,
            1470,
            130,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            45,
            594,
            3281,
            11059,
            24372,
            36245,
            43393,
            41730,
            30328,
            16045,
            5533,
            823,
            14,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            95,
            1059,
            5061,
            14698,
            26992,
            37739
          ]
        ]
      },
      "call": {
        "duration": 0.27254842999900575,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0015011440009402577,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.32]",
      "lineno": 356,
      "outcome": "passed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.32]",
        "pytestmark",
        "1.32",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29179736899823183,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1695412379995105,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0014518520001729485,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECOND[1.2]",
      "lineno": 246,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 4.304779350000899,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            60,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            10,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            0,
            0,
            47,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            255,
            0,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            255,
            255,
            255,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            0,
            0,
            0,
            255,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        "maxwidth": [
          4,
          5,
          5,
          5,
          4,
          5
        ],
        "second_max_width": [
          4,
          5,
          4,
          4,
          4,
          4
        ]
      },
      "call": {
        "duration": 0.0035335380016476847,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029275249980855733,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_ePortRXPRBS_ECONT[1.2]",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_ePortRXPRBS_ECONT[1.2]",
        "pytestmark",
        "1.2",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.5364473669978906,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=2 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=3 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=4 pattern=290 words_little_endian=1 bytes_little_endian=1\n     link=0 pattern=290 words_little_endian=0 bytes_little_endian=1\n     link=1 pattern=290 words_little_endian=0 bytes_little_endian=1\n"
      },
      "metadata": {
        "eRX_errcounts": [
          [
            255,
            2,
            255,
            7,
            255,
            1,
            45,
            0,
            255,
            0,
            255,
            255
          ],
          [
            52,
            0,
            24,
            0,
            4,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            34,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            147,
            255,
            0,
            4,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            23,
            0,
            1,
            0,
            14,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            255,
            11,
            255,
            66,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ],
          [
            255,
            255,
            255,
            255,
            255,
            255,
            0,
            0,
            1,
            0,
            2,
            255
          ],
          [
            255,
            0,
            255,
            1,
            255,
            7,
            5,
            0,
            255,
            7,
            255,
            255
          ],
          [
            42,
            0,
            3,
            0,
            4,
            0,
            255,
            255,
            255,
            255,
            255,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            255,
            255,
            82,
            255,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            255,
            0,
            6,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            135,
            0,
            8,
            0,
            32,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            255,
            165,
            255,
            67,
            255,
            0,
            0,
            0,
            0,
            0,
            255
          ]
        ],
        "maxwidth": [
          5,
          5,
          4,
          4,
          4,
          4
        ],
        "second_max_width": [
          4,
          4,
          4,
          4,
          4,
          4
        ]
      },
      "call": {
        "duration": 0.003661881000880385,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.0029230250002001412,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECOND[1.2]",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_eTX_delayscan_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.29636596199998166,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48361,
            47754,
            47646,
            47525,
            47752,
            47757,
            47604,
            47613,
            47883,
            47682,
            47724,
            49672,
            47691,
            48089,
            47851,
            47934,
            47701,
            47597,
            47748,
            47586,
            47741,
            47750,
            47743,
            47728,
            47682,
            47556,
            47736,
            47599,
            47712,
            47779,
            47869,
            47564,
            47800,
            47598,
            47871,
            47703,
            49233,
            47786,
            48125,
            47769,
            47561,
            47367,
            47750,
            47624,
            47745,
            47544,
            47722,
            47881,
            47695,
            47750,
            47700,
            47750,
            47853,
            47655,
            47678,
            47608,
            47684,
            47602,
            47754,
            47664,
            47644,
            48138,
            47720
          ],
          [
            48361,
            47754,
            47646,
            47525,
            47752,
            47757,
            47604,
            47613,
            47883,
            47682,
            47724,
            49672,
            47691,
            48089,
            47851,
            47934,
            47701,
            47597,
            47748,
            47586,
            47741,
            47750,
            47743,
            47728,
            47682,
            47556,
            47736,
            47599,
            47712,
            47779,
            47869,
            47564,
            47800,
            47598,
            47871,
            47703,
            49233,
            47786,
            48125,
            47769,
            47561,
            47367,
            47750,
            47624,
            47745,
            47544,
            47722,
            47881,
            47695,
            47750,
            47700,
            47750,
            47853,
            47655,
            47678,
            47608,
            47684,
            47602,
            47754,
            47664,
            47644,
            48138,
            47720
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            500,
            6011,
            24335,
            39107,
            36680,
            16652,
            3294,
            435,
            16,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            15,
            566,
            5833,
            20857,
            38070,
            39201,
            23193,
            5910,
            921,
            29,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            69,
            1673,
            12543,
            31731,
            41737,
            31334,
            10529,
            2265,
            105,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            16,
            441,
            5348,
            20649,
            38447,
            42812,
            32890,
            13720,
            2465,
            252,
            8,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            33,
            795,
            6977,
            23797,
            40342,
            43912
          ]
        ]
      },
      "call": {
        "duration": 0.13533451900002547,
        "outcome": "passed"
      },
      "teardown": {
        "duration": 0.001632486000744393,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTX_delayscan_ECONT[1.2]",
      "lineno": 330,
      "outcome": "failed",
      "keywords": [
        "test_eTX_delayscan_ECONT[1.2]",
        "pytestmark",
        "1.2",
        "ECONT",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.06934561700109043,
        "outcome": "passed"
      },
      "metadata": {
        "eTX_delays": [
          0,
          8,
          16,
          24,
          32,
          40,
          48,
          56,
          64,
          72,
          80,
          88,
          96,
          104,
          112,
          120,
          128,
          136,
          144,
          152,
          160,
          168,
          176,
          184,
          192,
          200,
          208,
          216,
          224,
          232,
          240,
          248,
          256,
          264,
          272,
          280,
          288,
          296,
          304,
          312,
          320,
          328,
          336,
          344,
          352,
          360,
          368,
          376,
          384,
          392,
          400,
          408,
          416,
          424,
          432,
          440,
          448,
          456,
          464,
          472,
          480,
          488,
          496
        ],
        "eTX_bitcounts": [
          [
            48254,
            47803,
            58475,
            47658,
            47769,
            47583,
            47586,
            47577,
            47685,
            47697,
            47417,
            48120,
            47568,
            47638,
            47565,
            47644,
            47486,
            47566,
            47662,
            47399,
            47547,
            47698,
            47517,
            47758,
            47706,
            47631,
            47626,
            48075,
            47508,
            47680,
            47281,
            47598,
            47607,
            47749,
            47620,
            47540,
            47685,
            47717,
            47836,
            47669,
            47443,
            47662,
            47532,
            47978,
            47655,
            47645,
            47642,
            47510,
            47581,
            47535,
            47603,
            47521,
            47705,
            47706,
            47695,
            47714,
            47673,
            47574,
            47710,
            48060,
            47920,
            47419,
            47573
          ],
          [
            48254,
            47803,
            58475,
            47658,
            47769,
            47583,
            47586,
            47577,
            47685,
            47697,
            47417,
            48120,
            47568,
            47638,
            47565,
            47644,
            47486,
            47566,
            47662,
            47399,
            47547,
            47698,
            47517,
            47758,
            47706,
            47631,
            47626,
            48075,
            47508,
            47680,
            47281,
            47598,
            47607,
            47749,
            47620,
            47540,
            47685,
            47717,
            47836,
            47669,
            47443,
            47662,
            47532,
            47978,
            47655,
            47645,
            47642,
            47510,
            47581,
            47535,
            47603,
            47521,
            47705,
            47706,
            47695,
            47714,
            47673,
            47574,
            47710,
            48060,
            47920,
            47419,
            47573
          ],
          [
            48254,
            47803,
            58475,
            47658,
            47769,
            47583,
            47586,
            47577,
            47685,
            47697,
            47417,
            48120,
            47568,
            47638,
            47565,
            47644,
            47486,
            47566,
            47662,
            47399,
            47547,
            47698,
            47517,
            47758,
            47706,
            47631,
            47626,
            48075,
            47508,
            47680,
            47281,
            47598,
            47607,
            47749,
            47620,
            47540,
            47685,
            47717,
            47836,
            47669,
            47443,
            47662,
            47532,
            47978,
            47655,
            47645,
            47642,
            47510,
            47581,
            47535,
            47603,
            47521,
            47705,
            47706,
            47695,
            47714,
            47673,
            47574,
            47710,
            48060,
            47920,
            47419,
            47573
          ],
          [
            48254,
            47803,
            58475,
            47658,
            47769,
            47583,
            47586,
            47577,
            47685,
            47697,
            47417,
            48120,
            47568,
            47638,
            47565,
            47644,
            47486,
            47566,
            47662,
            47399,
            47547,
            47698,
            47517,
            47758,
            47706,
            47631,
            47626,
            48075,
            47508,
            47680,
            47281,
            47598,
            47607,
            47749,
            47620,
            47540,
            47685,
            47717,
            47836,
            47669,
            47443,
            47662,
            47532,
            47978,
            47655,
            47645,
            47642,
            47510,
            47581,
            47535,
            47603,
            47521,
            47705,
            47706,
            47695,
            47714,
            47673,
            47574,
            47710,
            48060,
            47920,
            47419,
            47573
          ],
          [
            48254,
            47803,
            58475,
            47658,
            47769,
            47583,
            47586,
            47577,
            47685,
            47697,
            47417,
            48120,
            47568,
            47638,
            47565,
            47644,
            47486,
            47566,
            47662,
            47399,
            47547,
            47698,
            47517,
            47758,
            47706,
            47631,
            47626,
            48075,
            47508,
            47680,
            47281,
            47598,
            47607,
            47749,
            47620,
            47540,
            47685,
            47717,
            47836,
            47669,
            47443,
            47662,
            47532,
            47978,
            47655,
            47645,
            47642,
            47510,
            47581,
            47535,
            47603,
            47521,
            47705,
            47706,
            47695,
            47714,
            47673,
            47574,
            47710,
            48060,
            47920,
            47419,
            47573
          ]
        ],
        "eTX_errcounts": [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            5,
            144,
            1591,
            6034,
            14288,
            25480,
            36451,
            37186,
            26312,
            13882,
            3700,
            480,
            31,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            48,
            581,
            3632,
            11363,
            22568,
            31708,
            33857,
            29717,
            21385,
            12492,
            5121,
            929,
            54,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            5,
            200,
            1281,
            4516,
            11439,
            23262,
            35843,
            43406,
            40274,
            25863,
            10437,
            2465,
            335,
            23,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            30,
            372,
            2307,
            6196,
            13935,
            27870,
            39119,
            37889,
            30033,
            16079,
            5391,
            1068,
            122,
            13,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            69
          ],
          [
            14039,
            4191,
            728,
            34,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            42,
            1045,
            7139,
            18618,
            31610,
            39582,
            32517,
            17655,
            7104,
            1130,
            66,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            19,
            567,
            4347,
            13226,
            25817,
            35284,
            33850,
            24112,
            10696,
            2070,
            223,
            5,
            0,
            0,
            0,
            0
          ],
          [
            87,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            46,
            644,
            5045,
            14749,
            25604,
            37672,
            41310,
            34088,
            22766,
            11331,
            3610,
            505,
            37,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4,
            94,
            709,
            3725,
            12549,
            25418,
            34728,
            34125,
            25761,
            13286,
            4484,
            907,
            70,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            91,
            1194,
            4943,
            14734,
            26080,
            36246,
            40856,
            39286,
            27683,
            16218,
            5740,
            973,
            54,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            26,
            456,
            2345,
            7171,
            16722,
            28784,
            37253,
            37049,
            31843,
            24244,
            15277,
            6722,
            1777,
            102,
            11,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ]
        ]
      },
      "call": {
        "duration": 0.2743731910013594,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 354,
          "message": "assert False\n +  where False = <built-in method all of numpy.ndarray object at 0xffffa422e810>()\n +    where <built-in method all of numpy.ndarray object at 0xffffa422e810> = array([14, 12, 14, 14, 10]) >= 12.all"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 354,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECONT = <utils.io.IO object at 0xffffa4480580>, out_of_reset = None, eTX_delay_scan_setup_ECONT = None\njson_metadata = {'eTX_bitcounts': [[48254, 47803, 58475, 47658, 47769, 47583, ...], [48254, 47803, 58475, 47658, 47769, 47583, ...], [..., ...], [0, 0, 0, 0, 0, 0, ...], [14039, 4191, 728, 34, 1, 0, ...], [87, 9, 0, 0, 0, 0, ...], [0, 0, 0, 0, 0, 0, ...]]}\n\n    @pytest.mark.ECONT\n    def test_eTX_delayscan_ECONT(\n        set_voltage,\n        from_IO_ECONT,\n        out_of_reset,\n        eTX_delay_scan_setup_ECONT,\n        json_metadata\n    ):\n        \"\"\"\n        Scan the delays in \"from_IO\" and measure the bit error rate for each delay.\n        \"\"\"\n        delays, bitcounts, errcounts = from_IO_ECONT.delay_scan()\n        json_metadata[\"eTX_delays\"] = delays.tolist()\n        json_metadata[\"eTX_bitcounts\"] = bitcounts.tolist()\n        json_metadata[\"eTX_errcounts\"] = errcounts.tolist()\n    \n        max_width, second_max_width = get_max_width(errcounts.T, num_channels=5, padding=10)\n    \n        # pprint(errcounts.T)\n        # pprint(max_width)\n        # pprint(second_max_width)\n    \n        assert (max_width >= 13).all()  ## values previously use in ECONT qc_test\n>       assert (second_max_width >= 12).all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0xffffa422e810>()\nE        +    where <built-in method all of numpy.ndarray object at 0xffffa422e810> = array([14, 12, 14, 14, 10]) >= 12.all\n\ntest_io.py:354: AssertionError"
      },
      "teardown": {
        "duration": 0.0016269959996861871,
        "outcome": "passed"
      }
    },
    {
      "nodeid": "test_io.py::test_eTx_PRBS7_ECOND[1.2]",
      "lineno": 356,
      "outcome": "failed",
      "keywords": [
        "test_eTx_PRBS7_ECOND[1.2]",
        "pytestmark",
        "1.2",
        "ECOND",
        "test_io.py",
        "test_mezzanine"
      ],
      "setup": {
        "duration": 0.2925206559993967,
        "outcome": "passed",
        "stdout": "     link=0 pattern=290 words_little_endian=1 bytes_little_endian=0\n     link=1 pattern=290 words_little_endian=1 bytes_little_endian=0\n"
      },
      "call": {
        "duration": 2.1706901130019105,
        "outcome": "failed",
        "crash": {
          "path": "/home/jsw/mezz/econd-sw/test_mezzanine/test_io.py",
          "lineno": 393,
          "message": "AssertionError: ((40045882, 10011470), (411074, 411074), (40048375, 10012094))\nassert ((40045882 > 0 and 10011470 == 0\n  +10011470\n  -0))"
        },
        "traceback": [
          {
            "path": "test_io.py",
            "lineno": 393,
            "message": "AssertionError"
          }
        ],
        "longrepr": "set_voltage = None, from_IO_ECOND = <utils.io.IO object at 0xffffa4480400>, sc_ECOND = <utils.streamcompare.StreamCompare object at 0xffffa41d7550>, out_of_reset = None, eTX_delay_scan_setup_ECOND = None\ni2c_ECOND = <econ_i2c.ECON_I2C object at 0xfffface05b80>, json_metadata = {}\n\n    @pytest.mark.ECOND\n    def test_eTx_PRBS7_ECOND(\n        set_voltage,\n        from_IO_ECOND,\n        sc_ECOND,\n        out_of_reset,\n        eTX_delay_scan_setup_ECOND,\n        i2c_ECOND,\n        json_metadata,\n    ):\n    \n        sleep_time = 1\n    \n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 1}}})\n        from_IO_ECOND.reset_links()\n        from_IO_ECOND.setup(invert=[0,0], align=1)\n        time.sleep(0.1)\n    \n        def check_prbs7_sc(sc, sleep_time):\n            sc.reset_counters()\n            time.sleep(sleep_time)\n            sc.latch_counters()\n            word_count, err_count = sc.read_both_counters()\n            return word_count, err_count\n    \n        #check initially\n        word_count_1, err_count_1 = check_prbs7_sc(sc_ECOND, sleep_time)\n    \n        #turn off prbs and check it is all errors\n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 0}}})\n        word_count_2, err_count_2 = check_prbs7_sc(sc_ECOND, min(sleep_time, 0.01))\n    \n        #turn prbs back on, and check we're error free again\n        i2c_ECOND.write({\"FormatterBuffer\": {\"Global\": {\"prbs_on\": 1}}})\n        word_count_3, err_count_3 = check_prbs7_sc(sc_ECOND, sleep_time)\n    \n>       assert ((word_count_1 > 0 and err_count_1 == 0) and\n                (word_count_2 > 0 and err_count_2 == word_count_2) and\n                (word_count_3 > 0 and err_count_3 == 0)), ((word_count_1, err_count_1),\n                                                           (word_count_2, err_count_2),\n                                                           (word_count_3, err_count_3))\nE       AssertionError: ((40045882, 10011470), (411074, 411074), (40048375, 10012094))\nE       assert ((40045882 > 0 and 10011470 == 0\nE         +10011470\nE         -0))\n\ntest_io.py:393: AssertionError"
      },
      "teardown": {
        "duration": 0.004985841002053348,
        "outcome": "passed"
      }
    }
  ],
  "FPGA-hexa-IP": "11",
  "branch": "DN_CMtester_IO",
  "commit_hash": "4f4f43d62e25add927a484f024c3e2e08d3482d8",
  "remote_url": "ssh://git@gitlab.cern.ch:7999/hgcal-daq-sw/econd-sw.git",
  "status": "M common_pytest/fixtures.py\u0000 M gpib_controls\u0000 M test_mezzanine/conftest.py\u0000 M test_mezzanine/pytest.ini\u0000 M test_mezzanine/test_io.py\u0000 M utils/gpibclient.py\u0000?? econ_i2c.py.orig\u0000?? test_mezzanine/tmp.py\u0000?? test_radiation/conftest.py.orig\u0000?? test_vectors/\u0000?? utils/align.py.orig\u0000?? utils/io.py.orig\u0000",
  "firmware_name": "econ-mezz-tester-kria.bit\u0000",
  "firmware_git_desc": "9e5953f-dirty",
  "chip_number": null
}